import { customAlphabet } from "nanoid";
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";
import { z } from "zod";
import { env } from "@/lib/env.mjs";
import { DEFAULT_CURRENCY } from "@/constant/config";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export const nanoid = customAlphabet("abcdefghijklmnopqrstuvwxyz0123456789");

export const timestamps: { createdAt: true; updatedAt: true } = {
  createdAt: true,
  updatedAt: true,
};

export type Action = "create" | "update" | "delete";

export type OptimisticAction<T> = {
  action: Action;
  data: T;
};

/**
 * generated by ChatGPT
 */
export const arabicToEnglishNumbers = (str: string) => {
  const arabicNums = ["٠", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩"];
  const chars = str.split("");
  const converted = chars
    .map((char: string) => {
      const index = arabicNums.indexOf(char);
      return index !== -1 ? index : char;
    })
    .join("");
  return converted;
};

/**
 * generated by ChatGPT
 */
export const zNumber = z.preprocess((value) => {
  if (typeof value === "string") {
    const converted = arabicToEnglishNumbers(value);
    const parsedNumber = parseFloat(converted);
    return isNaN(parsedNumber) ? value : parsedNumber;
  }
  return value;
}, z.number({ invalid_type_error: "must be a number" }));

export const getLocaleDirection = (locale: string) => {
  const RTL_LOCALES = ["ar", "he", "fa", "ur"];
  const language = locale?.split("-")[0];
  return RTL_LOCALES.includes(language) ? "rtl" : "ltr";
};

/**
 * generated by ChatGPT
 */
export const formatCurrency = (
  value: number,
  currencyCode: string | undefined,
  isRTL: boolean
  // locale = "en-US"
) => {
  return new Intl.NumberFormat(isRTL ? "ar-EG" : "en-US", {
    style: "currency",
    currency: currencyCode || DEFAULT_CURRENCY,
    currencyDisplay: "symbol", // Options are 'symbol', 'narrowSymbol', 'code', or 'name'
    minimumFractionDigits: 0, // Do not show decimals if they are zero
    maximumFractionDigits: 2, // Maximum of 2 decimal places
  })
    .format(value)
    .replace("ج.م.", "ج.م");
};

export const formatNumber = (value: number, isRTL: boolean): string => {
  const locale = isRTL ? "ar-EG" : "en-US"; // Choose locales based on RTL

  return new Intl.NumberFormat(locale, {
    maximumFractionDigits: 2, // Maximum of 2 decimal places
    minimumFractionDigits: 0, // Do not show decimals if they are zero
  }).format(value);
};

/**
 * from sadmann7/file-uploader repo
 * @see https://github.com/sadmann7/file-uploader/blob/main/src/lib/utils.ts
 */
export function absoluteUrl(path: string) {
  return `${env.NEXT_PUBLIC_APP_URL}${path}`;
}

/**
 * from sadmann7/file-uploader repo
 * @see https://github.com/sadmann7/file-uploader/blob/main/src/lib/utils.ts
 */
export function formatBytes(
  bytes: number,
  opts: {
    decimals?: number;
    sizeType?: "accurate" | "normal";
  } = {}
) {
  const { decimals = 0, sizeType = "normal" } = opts;

  const sizes = ["Bytes", "KB", "MB", "GB", "TB"];
  const accurateSizes = ["Bytes", "KiB", "MiB", "GiB", "TiB"];
  if (bytes === 0) return "0 Byte";
  const i = Math.floor(Math.log(bytes) / Math.log(1024));
  return `${(bytes / Math.pow(1024, i)).toFixed(decimals)} ${
    sizeType === "accurate" ? accurateSizes[i] ?? "Bytest" : sizes[i] ?? "Bytes"
  }`;
}

/**
 * from the @radix-ui/primitive
 * @see https://github.com/radix-ui/primitives/blob/main/packages/core/primitive/src/primitive.tsx
 */
export function composeEventHandlers<E>(
  originalEventHandler?: (event: E) => void,
  ourEventHandler?: (event: E) => void,
  { checkForDefaultPrevented = true } = {}
) {
  return function handleEvent(event: E) {
    originalEventHandler?.(event);

    if (
      checkForDefaultPrevented === false ||
      !(event as unknown as Event).defaultPrevented
    ) {
      return ourEventHandler?.(event);
    }
  };
}

/**
 * generated by ChatGPT
 */
export function debounce<F extends (...args: any[]) => any>(
  fn: F,
  delay: number
): (...args: Parameters<F>) => void {
  let timeoutID: NodeJS.Timeout | null = null;
  return function (...args: Parameters<F>) {
    if (timeoutID !== null) {
      clearTimeout(timeoutID);
    }
    timeoutID = setTimeout(() => fn(...args), delay);
  };
}
